// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addNewUser = `-- name: AddNewUser :execresult
INSERT INTO user(userName,email,number,address,password,token)
    VALUES (?,?,?,?,?,'')
`

type AddNewUserParams struct {
	Username string
	Email    string
	Number   string
	Address  string
	Password string
}

func (q *Queries) AddNewUser(ctx context.Context, arg AddNewUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addNewUser,
		arg.Username,
		arg.Email,
		arg.Number,
		arg.Address,
		arg.Password,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE from user
    WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const forgotPass = `-- name: ForgotPass :exec
UPDATE user
    SET password = ? WHERE id = ?
`

type ForgotPassParams struct {
	Password string
	ID       uint32
}

func (q *Queries) ForgotPass(ctx context.Context, arg ForgotPassParams) error {
	_, err := q.db.ExecContext(ctx, forgotPass, arg.Password, arg.ID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, createdat, updatedat, deletedat, username, email, number, address, password, token FROM user
    ORDER BY id asc
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Username,
			&i.Email,
			&i.Number,
			&i.Address,
			&i.Password,
			&i.Token,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserbyEmail = `-- name: GetUserbyEmail :one
SELECT id, createdat, updatedat, deletedat, username, email, number, address, password, token FROM user
Where email = ?
`

func (q *Queries) GetUserbyEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Username,
		&i.Email,
		&i.Number,
		&i.Address,
		&i.Password,
		&i.Token,
	)
	return i, err
}

const getUserbyId = `-- name: GetUserbyId :one
SELECT id, createdat, updatedat, deletedat, username, email, number, address, password, token FROM user
    Where id = ?
`

func (q *Queries) GetUserbyId(ctx context.Context, id uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Username,
		&i.Email,
		&i.Number,
		&i.Address,
		&i.Password,
		&i.Token,
	)
	return i, err
}

const getUserbyUsername = `-- name: GetUserbyUsername :one
SELECT id, createdat, updatedat, deletedat, username, email, number, address, password, token FROM user
Where userName = ?
`

func (q *Queries) GetUserbyUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Username,
		&i.Email,
		&i.Number,
		&i.Address,
		&i.Password,
		&i.Token,
	)
	return i, err
}

const setToken = `-- name: SetToken :exec
UPDATE user
    SET token = ? WHERE id = ?
`

type SetTokenParams struct {
	Token string
	ID    uint32
}

func (q *Queries) SetToken(ctx context.Context, arg SetTokenParams) error {
	_, err := q.db.ExecContext(ctx, setToken, arg.Token, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user
    SET userName = ?, email = ?, number = ?, address = ?
    WHERE id = ?
`

type UpdateUserParams struct {
	Username string
	Email    string
	Number   string
	Address  string
	ID       uint32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Number,
		arg.Address,
		arg.ID,
	)
	return err
}

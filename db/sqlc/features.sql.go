// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: features.sql

package sqlc

import (
	"context"
	"database/sql"
)

const featDummy = `-- name: FeatDummy :execresult
INSERT INTO features(title,description,productId)
    VALUES ('Admin','Robot asisten kami dapat membantu dalam tugas-tugas administratif rumah sakit seperti pengiriman pesan, pengarsipan, dan pencatatan data.',
            '1')
`

func (q *Queries) FeatDummy(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy)
}

const featDummy2 = `-- name: FeatDummy2 :execresult
INSERT INTO features(title,description,productId)
    VALUES ('Perawatan','Robot kami dilengkapi dengan teknologi canggih yang memungkinkan mereka memberikan perawatan dasar kepada pasien.',
            '1')
`

func (q *Queries) FeatDummy2(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy2)
}

const featDummy3 = `-- name: FeatDummy3 :execresult
INSERT INTO features(title,description,productId)
    VALUES('Pemantauan',' Robot kami dapat memantau kondisi pasien secara real-time dan memberikan laporan kepada tim medis.',
           '1')
`

func (q *Queries) FeatDummy3(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy3)
}

const featDummy4 = `-- name: FeatDummy4 :execresult
INSERT INTO features(title,description,productId)
    VALUES('Tepat','Diatur untuk mematuhi prosedur dan protokol dengan ketat, yang meningkatkan keselamatan pasien dan memastikan bahwa perawatan sesuai dengan standar tertinggi.',
           '1')
`

func (q *Queries) FeatDummy4(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy4)
}

const featDummy5 = `-- name: FeatDummy5 :execresult
INSERT INTO features(title,description,productId)
    VALUES('Cepat','Teknologi kami dilengkapi dengan algoritma cerdas yang memungkinkan diagnosis penyakit dalam waktu singkat dan dengan akurasi yang tinggi. ',
           '2')
`

func (q *Queries) FeatDummy5(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy5)
}

const featDummy6 = `-- name: FeatDummy6 :execresult
INSERT INTO features(title,description,productId)
    VALUES('Manajemen',' Solusi kami menghadirkan sistem manajemen data medis yang aman dan efisien. Ini memungkinkan penyimpanan data medis yang terstruktur.','2')
`

func (q *Queries) FeatDummy6(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy6)
}

const featDummy7 = `-- name: FeatDummy7 :execresult
INSERT INTO features(title,description,productId)
    VALUES('Identifikasi','AI kami dapat menganalisis data medis pasien untuk mengidentifikasi pola dan tren yang unik. Ini membantu dalam merancang rencana perawatan yang lebih disesuaikan dengan kebutuhan pasien, meningkatkan hasil perawatan mereka.','2')
`

func (q *Queries) FeatDummy7(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy7)
}

const featDummy8 = `-- name: FeatDummy8 :execresult
INSERT INTO features(title,description,productId)
    VALUES('Analisis','Solusi kami juga dilengkapi dengan alat analitik yang kuat yang memungkinkan penyedia perawatan. Ini membantu dalam mengidentifikasi pola epidemiologi, risiko pasien, dan tren perawatan.','2')
`

func (q *Queries) FeatDummy8(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, featDummy8)
}

const getFeatures = `-- name: GetFeatures :many
select id, createdat, updatedat, deletedat, title, description, productid from features
    where  productId = ?
`

func (q *Queries) GetFeatures(ctx context.Context, productid uint32) ([]Feature, error) {
	rows, err := q.db.QueryContext(ctx, getFeatures, productid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feature
	for rows.Next() {
		var i Feature
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Title,
			&i.Description,
			&i.Productid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const showFeatures = `-- name: ShowFeatures :many
SELECT
    p.id AS product_id,
    p.createdAt AS product_createdAt,
    p.updatedAt AS product_updatedAt,
    p.deletedAt AS product_deletedAt,
    p.name AS product_name,
    p.description AS product_description,
    p.link AS product_link,
    p.book_pict AS product_book_pict,
    f.id AS feature_id,
    f.createdAt AS feature_createdAt,
    f.updatedAt AS feature_updatedAt,
    f.deletedAt AS feature_deletedAt,
    f.title AS feature_title,
    f.description AS feature_description
FROM
    product p
        LEFT JOIN
    features f ON p.id = f.productId
WHERE
        p.id = ?
`

type ShowFeaturesRow struct {
	ProductID          uint32
	ProductCreatedat   sql.NullTime
	ProductUpdatedat   sql.NullTime
	ProductDeletedat   sql.NullTime
	ProductName        string
	ProductDescription string
	ProductLink        string
	ProductBookPict    string
	FeatureID          sql.NullInt32
	FeatureCreatedat   sql.NullTime
	FeatureUpdatedat   sql.NullTime
	FeatureDeletedat   sql.NullTime
	FeatureTitle       sql.NullString
	FeatureDescription sql.NullString
}

func (q *Queries) ShowFeatures(ctx context.Context, id uint32) ([]ShowFeaturesRow, error) {
	rows, err := q.db.QueryContext(ctx, showFeatures, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowFeaturesRow
	for rows.Next() {
		var i ShowFeaturesRow
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductCreatedat,
			&i.ProductUpdatedat,
			&i.ProductDeletedat,
			&i.ProductName,
			&i.ProductDescription,
			&i.ProductLink,
			&i.ProductBookPict,
			&i.FeatureID,
			&i.FeatureCreatedat,
			&i.FeatureUpdatedat,
			&i.FeatureDeletedat,
			&i.FeatureTitle,
			&i.FeatureDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

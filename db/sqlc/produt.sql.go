// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: produt.sql

package sqlc

import (
	"context"
	"database/sql"
)

const dummy = `-- name: Dummy :execresult
INSERT INTO product(name,description,link,book_pict)
    VALUES ('AI Assistant',
            'Asisten Kesehatan kami adalah teknologi yang memadukan kecerdasan buatan dengan robotika untuk memberikan dukungan dalam berbagai tugas perawatan kesehatan. Ini mencakup bantuan administratif, perawatan pasien, dan pemantauan kondisi pasien.',
            'assist',
            'assistBook.jpg')
`

func (q *Queries) Dummy(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, dummy)
}

const dummy2 = `-- name: Dummy2 :execresult
INSERT INTO product(name,description,link,book_pict)
    VALUES('AI Diagnostic','Produk AI kami adalah solusi canggih yang dirancang untuk mendukung berbagai aspek perawatan kesehatan. Ini mencakup diagnosa penyakit yang cepat dan akurat, manajemen data medis yang efisien, serta analisis data yang mendalam untuk perencanaan perawatan yang lebih baik.',
        'diagnostic','diagBook.jpg')
`

func (q *Queries) Dummy2(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, dummy2)
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, createdat, updatedat, deletedat, name, description, link, book_pict FROM product
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Name,
			&i.Description,
			&i.Link,
			&i.BookPict,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsById = `-- name: GetProductsById :one
SELECT id, createdat, updatedat, deletedat, name, description, link, book_pict FROM product
    WHERE id = ?
`

func (q *Queries) GetProductsById(ctx context.Context, id uint32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductsById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Name,
		&i.Description,
		&i.Link,
		&i.BookPict,
	)
	return i, err
}
